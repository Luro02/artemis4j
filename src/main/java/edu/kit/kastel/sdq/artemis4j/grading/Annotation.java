/* Licensed under EPL-2.0 2024. */
package edu.kit.kastel.sdq.artemis4j.grading;

import java.util.Objects;
import java.util.Optional;
import java.util.UUID;

import edu.kit.kastel.sdq.artemis4j.client.AnnotationSource;
import edu.kit.kastel.sdq.artemis4j.grading.metajson.AnnotationDTO;
import edu.kit.kastel.sdq.artemis4j.grading.penalty.MistakeType;

/**
 * A single annotation as part of an assessment. Annotations may be manually
 * created, or generated by tools. Annotations may not be created for tests that
 * are executed by Artemis.
 */
public final class Annotation {
	private final String uuid;
	private final MistakeType type;
	private final String filePath;
	private final int startLine;
	private final int endLine;
	private final String customMessage;
	private final Double customScore;
	private final AnnotationSource source;

	public Annotation(AnnotationDTO dto, MistakeType mistakeType) {
		this.uuid = dto.uuid();
		this.type = mistakeType;
		this.filePath = dto.classFilePath();
		this.startLine = dto.startLine();
		this.endLine = dto.endLine();
		this.customMessage = dto.customMessageForJSON();
		this.customScore = dto.customPenaltyForJSON();
		this.source = dto.source() != null ? dto.source() : AnnotationSource.UNKNOWN;
	}

	 Annotation(MistakeType mistakeType, String filePath, int startLine, int endLine, String customMessage, Double customScore,
			AnnotationSource source) {
		// Validate custom penalty and message
		if (mistakeType.isCustomAnnotation()) {
			if (customScore == null) {
				throw new IllegalArgumentException("A custom penalty is required for custom annotation types.");
			}
			if (customMessage == null) {
				throw new IllegalArgumentException("A custom message is required for custom annotation types.");
			}
		} else if (customScore != null) {
			throw new IllegalArgumentException("A custom penalty is not allowed for non-custom annotation types.");
		}

		this.uuid = generateUUID();
		this.type = mistakeType;
		this.filePath = filePath;
		this.startLine = startLine;
		this.endLine = endLine;
		this.customMessage = customMessage;
		this.customScore = customScore;
		this.source = source;
	}

	public String getUUID() {
		return uuid;
	}

	public MistakeType getMistakeType() {
		return type;
	}

	public String getFilePath() {
		return filePath;
	}

	public String getFilePathWithoutType() {
		return this.filePath.replace(".java", "");
	}

	public int getStartLine() {
		return startLine;
	}

	public int getDisplayLine() {
		return startLine + 1;
	}

	public int getEndLine() {
		return endLine;
	}

	public Optional<String> getCustomMessage() {
		return Optional.ofNullable(customMessage);
	}

	public Optional<Double> getCustomScore() {
		return Optional.ofNullable(customScore);
	}

	public AnnotationSource getSource() {
		return source;
	}

	public AnnotationDTO toDTO() {
		return new AnnotationDTO(uuid, type.getId(), startLine, endLine, filePath, customMessage, customScore, source);
	}

	@Override
	public boolean equals(Object o) {
		if (this == o)
			return true;
		if (o == null || getClass() != o.getClass())
			return false;
		Annotation that = (Annotation) o;
		return Objects.equals(uuid, that.uuid);
	}

	@Override
	public int hashCode() {
		return Objects.hashCode(uuid);
	}

	private static String generateUUID() {
		return UUID.randomUUID().toString();
	}
}
